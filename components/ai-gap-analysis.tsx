"use client";

import { useEffect, useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Loader2 } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { generateGapAnalysis, generateRecommendations } from "@/lib/openai";

interface CategoryGapAnalysis {
  category: string;
  score: number;
  weight: number;
  priority: string;
  color: string;
  gapAnalysis: string;
  recommendations: string;
  loading: boolean;
}

interface Props {
  categories: Array<{
    category: string;
    score: number;
    fill: string;
  }>;
  weights: Record<string, number>;
  onAnalysisGenerated?: (analysis: CategoryGapAnalysis[]) => void;
}

export function AIGapAnalysis({
  categories,
  weights,
  onAnalysisGenerated
}: Props) {
  const [gapAnalyses, setGapAnalyses] = useState<CategoryGapAnalysis[]>([]);
  const [activeTab, setActiveTab] = useState<string>("gaps");
  const [selectedCategory, setSelectedCategory] = useState<string>("");

  useEffect(() => {
    // Initialize gap analyses with loading state
    const initialGaps = categories.map(item => ({
      category: item.category,
      score: item.score,
      weight: weights[item.category] || 0,
      priority: getPriority(item.score),
      color: getPriorityColor(item.score),
      gapAnalysis: "",
      recommendations: "",
      loading: true
    }));
    setGapAnalyses(initialGaps);
    
    if (initialGaps.length > 0) {
      setSelectedCategory(initialGaps[0].category);
    }

    // Generate gap analysis and recommendations for each category
    initialGaps.forEach(async (gap, index) => {
      try {
        // Generate gap analysis
        const gapAnalysisText = await generateGapAnalysis(
          gap.category, 
          gap.score,
          gap.weight
        );
        
        // Update state with gap analysis
        setGapAnalyses(prev => {
          const updated = [...prev];
          updated[index] = {
            ...updated[index],
            gapAnalysis: gapAnalysisText,
            loading: true // Still loading recommendations
          };
          return updated;
        });
        
        // Generate recommendations based on gap analysis
        const recommendationsText = await generateRecommendations(
          gap.category,
          gap.score,
          gapAnalysisText
        );
        
        // Update state with recommendations
        setGapAnalyses(prev => {
          const updated = [...prev];
          updated[index] = {
            ...updated[index],
            recommendations: recommendationsText,
            loading: false
          };
          onAnalysisGenerated?.(updated);
          return updated;
        });
      } catch (error) {
        console.error(`Error generating analysis for ${gap.category}:`, error);
        setGapAnalyses(prev => {
          const updated = [...prev];
          updated[index] = {
            ...updated[index],
            gapAnalysis: `Unable to generate gap analysis for ${gap.category} due to an error.`,
            recommendations: `Unable to generate recommendations for ${gap.category} due to an error.`,
            loading: false
          };
          return updated;
        });
      }
    });
  }, [categories, weights, onAnalysisGenerated]);

  const getPriority = (score: number) => {
    if (score < 30) return "Critical Priority";
    if (score < 60) return "High Priority";
    if (score < 80) return "Medium Priority";
    return "Low Priority";
  };

  const getPriorityColor = (score: number) => {
    if (score < 30) return "text-red-500";
    if (score < 60) return "text-amber-500";
    if (score < 80) return "text-green-500";
    return "text-blue-500";
  };

  const renderMarkdown = (content: string) => {
    // Simple markdown renderer for bold text and line breaks
    return content
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\n\n/g, '<br/><br/>')
      .replace(/\n/g, '<br/>');
  };

  const selectedAnalysis = gapAnalyses.find(gap => gap.category === selectedCategory);

  return (
    <Card className="mt-8">
      <CardHeader>
        <CardTitle>AI-Generated Gap Analysis & Recommendations</CardTitle>
        <CardDescription>
          Detailed analysis of gaps and actionable recommendations generated by GPT-4o
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          {/* Category Selection Sidebar */}
          <div className="md:col-span-1 border-r pr-4">
            <h3 className="font-medium text-lg mb-4">Categories</h3>
            <ul className="space-y-2">
              {gapAnalyses.map((item, index) => (
                <li 
                  key={index}
                  className={`p-2 rounded cursor-pointer hover:bg-muted transition-colors ${selectedCategory === item.category ? 'bg-muted' : ''}`}
                  onClick={() => setSelectedCategory(item.category)}
                >
                  <div className="flex justify-between items-center">
                    <span className="font-medium">{item.category}</span>
                    <span className={`text-xs font-medium ${item.color}`}>
                      {item.priority}
                    </span>
                  </div>
                  <div className="text-xs text-muted-foreground mt-1">
                    Score: {item.score}% | Weight: {item.weight}%
                  </div>
                </li>
              ))}
            </ul>
          </div>

          {/* Content Area */}
          <div className="md:col-span-3">
            {selectedAnalysis ? (
              <>
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-xl font-bold">{selectedAnalysis.category}</h2>
                  <div className="flex items-center gap-2">
                    <span className={`text-sm font-medium ${selectedAnalysis.color}`}>
                      {selectedAnalysis.priority}
                    </span>
                    <span className="text-sm text-muted-foreground">
                      Score: <span className="font-medium">{selectedAnalysis.score}%</span>
                    </span>
                  </div>
                </div>

                <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="gaps">Gap Analysis</TabsTrigger>
                    <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
                  </TabsList>

                  <TabsContent value="gaps" className="mt-4">
                    {selectedAnalysis.loading ? (
                      <div className="flex items-center justify-center py-8">
                        <Loader2 className="h-8 w-8 animate-spin mr-2" />
                        <span>Generating gap analysis...</span>
                      </div>
                    ) : (
                      <div 
                        className="prose max-w-none"
                        dangerouslySetInnerHTML={{ __html: renderMarkdown(selectedAnalysis.gapAnalysis) }}
                      />
                    )}
                  </TabsContent>

                  <TabsContent value="recommendations" className="mt-4">
                    {selectedAnalysis.loading ? (
                      <div className="flex items-center justify-center py-8">
                        <Loader2 className="h-8 w-8 animate-spin mr-2" />
                        <span>Generating recommendations...</span>
                      </div>
                    ) : (
                      <div 
                        className="prose max-w-none"
                        dangerouslySetInnerHTML={{ __html: renderMarkdown(selectedAnalysis.recommendations) }}
                      />
                    )}
                  </TabsContent>
                </Tabs>
              </>
            ) : (
              <div className="flex items-center justify-center py-8 text-muted-foreground">
                Select a category to view its gap analysis and recommendations
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
} 